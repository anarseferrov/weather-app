{"version":3,"sources":["redux/weather/weatherTypes.js","redux/weather/weatherReducer.js","redux/rootReducer.js","redux/store.js","redux/weather/weatherActions.js","components/WeatherCard.jsx","components/WeatherComponent.js","App.js","serviceWorker.js","index.js"],"names":["FETCH_WEATHER_REQUEST","FETCH_WEATHER_SUCCESS","FETCH_WEATHER_FAILURE","require","initialState","loading","weather_data","error","weatherReducer","state","action","type","payload","rootReducer","combineReducers","weather","store","createStore","composeWithDevTools","applyMiddleware","thunk","fetchWeather","city","dispatch","axios","get","then","response","data","fetchWeatherSuccess","catch","errorMessage","message","fetchWeatherFailure","connect","weatherData","className","name","sys","country","src","icon","alt","description","Math","round","main","temp","feels_like","humidity","wind","speed","pressure","visibility","useState","setCity","console","log","placeholder","value","onChange","e","target","onClick","class","cod","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.855a941f.chunk.js","sourcesContent":["export const FETCH_WEATHER_REQUEST = \"FETCH_WEATHER_REQUEST\";\r\nexport const FETCH_WEATHER_SUCCESS = \"FETCH_WEATHER_SUCCESS\";\r\nexport const FETCH_WEATHER_FAILURE = \"FETCH_WEATHER_FAILURE\";\r\n","const {\r\n  FETCH_WEATHER_REQUEST,\r\n  FETCH_WEATHER_SUCCESS,\r\n  FETCH_WEATHER_FAILURE,\r\n} = require(\"./weatherTypes\");\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  weather_data: [],\r\n  error: \"\",\r\n};\r\n\r\nconst weatherReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case FETCH_WEATHER_REQUEST:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case FETCH_WEATHER_SUCCESS:\r\n      return {\r\n        loading: false,\r\n        weather_data: action.payload,\r\n        error: \"\",\r\n      };\r\n    case FETCH_WEATHER_FAILURE:\r\n      return {\r\n        loading: false,\r\n        weather_data: [],\r\n        error: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default weatherReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport weatherReducer from \"./weather/weatherReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  weather: weatherReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"./rootReducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","import axios from \"axios\";\r\nimport {\r\n  FETCH_WEATHER_FAILURE,\r\n  FETCH_WEATHER_REQUEST,\r\n  FETCH_WEATHER_SUCCESS,\r\n} from \"./weatherTypes\";\r\n\r\nexport const fetchWeatherRequest = () => {\r\n  return {\r\n    type: FETCH_WEATHER_REQUEST,\r\n  };\r\n};\r\n\r\nexport const fetchWeatherSuccess = (weather_data) => {\r\n  return {\r\n    type: FETCH_WEATHER_SUCCESS,\r\n    payload: weather_data,\r\n  };\r\n};\r\n\r\nexport const fetchWeatherFailure = (error) => {\r\n  return {\r\n    type: FETCH_WEATHER_FAILURE,\r\n    payload: error,\r\n  };\r\n};\r\n\r\n//don't share your api key!!!\r\nconst API_KEY = '3d849daa77fc5e881348707889c4a51d'\r\n\r\nexport const fetchWeather = (city) => {\r\n  return (dispatch) => {\r\n    dispatch(fetchWeatherRequest());\r\n    axios\r\n      .get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`)\r\n      .then((response) => {\r\n        const weather_data = response.data;\r\n        dispatch(fetchWeatherSuccess(weather_data));\r\n      })\r\n      .catch((error) => {\r\n        const errorMessage = error.message;\r\n        dispatch(fetchWeatherFailure(errorMessage));\r\n      });\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction WeatherCard({ weatherData }) {\r\n  return (\r\n    <div className=\"weather-card\">\r\n      <div className=\"card-header\">\r\n        <div className=\"city-info\">\r\n          <span className=\"city-name\">{weatherData.name}</span>,\r\n          <span className=\"country-name\">{weatherData.sys.country}</span>\r\n        </div>\r\n        <div className=\"icon\">\r\n          <img\r\n            src={`http://openweathermap.org/img/wn/${weatherData.weather[0].icon}@2x.png`}\r\n            alt={weatherData.weather[0].description}\r\n          ></img>\r\n        </div>\r\n        <h5>{weatherData.weather[0].description}</h5>\r\n        <div className=\"temp\">\r\n          {Math.round(weatherData.main.temp - 273)}\r\n          <sup>o</sup>\r\n        </div>\r\n        <div className=\"small-temp\">\r\n          {Math.round(weatherData.main.feels_like) - 273}\r\n          <sup>o</sup>\r\n        </div>\r\n      </div>\r\n      <div className=\"card-footer\">\r\n        <span>H {weatherData.main.humidity}%</span>\r\n        <span>Wind {weatherData.wind.speed} MPH</span>\r\n        <span>{weatherData.main.pressure} ATM</span>\r\n        <span>Visibility {weatherData.visibility} M</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    weatherData: state.weather.weather_data,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(WeatherCard);\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchWeather } from \"../redux\";\r\nimport WeatherCard from \"./WeatherCard\";\r\n\r\nfunction WeatherComponent({ fetchWeather, weatherData }) {\r\n  const [city, setCity] = useState(\"\");\r\n  console.log(weatherData);\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"App\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter City\"\r\n          value={city}\r\n          onChange={(e) => setCity(e.target.value)}\r\n        />\r\n        <br />\r\n        <button onClick={() => fetchWeather(city)}>Get Forecast</button>\r\n      </div>\r\n      {weatherData.loading ? (\r\n        <div class=\"lds-roller\"><div></div><div></div><div></div><div></div></div>\r\n      ) : weatherData.weather_data.cod === 200 ? (\r\n        <WeatherCard />\r\n      ) : weatherData.error ? (\r\n        <div className=\"error\">{weatherData.error}</div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    weatherData: state.weather,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchWeather: (city) => dispatch(fetchWeather(city)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherComponent);\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport WeatherComponent from \"./components/WeatherComponent\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div>\n        <nav className=\"header\">\n          <h1>React Redux Weather App</h1>\n        </nav>\n        <WeatherComponent />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}